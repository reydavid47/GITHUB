(function (h) { Array.prototype.SortByDistance = (function (y) { this.sort(function (B, z) { var C, A, D; if (B.Distance.indexOf("ft") > -1) { A = B.Distance.replace(" ft", "") / 5280 } else { if (B.Distance.indexOf("mi") > -1) { A = B.Distance.replace(" mi", "") * 1 } } if (z.Distance.indexOf("ft") > -1) { D = z.Distance.replace(" ft", "") / 5280 } else { if (z.Distance.indexOf("mi") > -1) { D = z.Distance.replace(" mi", "") * 1 } } C = (y == "ASC" ? A - D : D - A); if (C == 0) { C = (B.PracticeName.toLowerCase() == z.PracticeName.toLowerCase() ? 0 : (B.PracticeName.toLowerCase() > z.PracticeName.toLowerCase() ? 1 : -1)) } return C }) }); Array.prototype.SortByPractice = (function (y) { switch (y) { case "ASC": this.sort(function (A, z) { var B = A.PracticeName.toLowerCase(), D = z.PracticeName.toLowerCase(), C = (B == D ? 0 : (B > D ? 1 : -1)); if (C === 0) { C = (A.Distance.replace(" mi", "") - z.Distance.replace(" mi", "")) } return C }); break; case "DESC": this.sort(function (A, z) { var B = A.PracticeName.toLowerCase(), D = z.PracticeName.toLowerCase(), C = (B == D ? 0 : (B > D ? -1 : 1)); if (C === 0) { C = (A.Distance.replace(" mi", "") - z.Distance.replace(" mi", "")) } return C }); break; default: this.sort(function (A, z) { var B = A.PracticeName.toLowerCase(), D = z.PracticeName.toLowerCase(), C = (B == D ? 0 : (B > D ? 1 : -1)); if (C === 0) { C = (A.Distance.replace(" mi", "") - z.Distance.replace(" mi", "")) } return C }); break } }); Array.prototype.SortByFairPrice = (function (y) { switch (y) { case "ASC": this.sort(function (A, z) { var D = (A.FairPrice ? 0 : 1), B = (z.FairPrice ? 0 : 1), C = D - B; if (C === 0) { C = (A.Distance.replace(" mi", "") - z.Distance.replace(" mi", "")) } return C }); break; case "DESC": this.sort(function (A, z) { var D = (A.FairPrice ? 0 : 1), B = (z.FairPrice ? 0 : 1), C = B - D; if (C === 0) { C = (A.Distance.replace(" mi", "") - z.Distance.replace(" mi", "")) } return C }); break; default: this.sort(function (A, z) { var D = (A.FairPrice ? 0 : 1), B = (z.FairPrice ? 0 : 1), C = D - B; if (C === 0) { C = (A.Distance.replace(" mi", "") - z.Distance.replace(" mi", "")) } return C }); break } }); Array.prototype.SortByTotalCost = (function (z) { switch (z) { case "ASC": this.sort(function (B, A) { var C = B.RangeMin; bNum = A.RangeMin; dif = C - bNum; if (dif === 0) { dif = (B.Distance.replace(" mi", "") - A.Distance.replace(" mi", "")) } return dif }); break; case "DESC": this.sort(function (B, A) { var C = B.RangeMin; bNum = A.RangeMin; dif = bNum - C; if (dif === 0) { dif = (A.Distance.replace(" mi", "") - B.Distance.replace(" mi", "")) } return dif }); break; default: var y = a.RangeMin; bNum = b.RangeMin; dif = y - bNum; if (dif === 0) { dif = (a.Distance.replace(" mi", "") - b.Distance.replace(" mi", "")) } return dif } }); var s = [], w = [], l = [], p = [], i = null, d = null, o = null, n = null, k = null, r = null, g = false, j = true, e = false, f = null, x = 0, c = 0, u, v, t = function (z) { var y = s[z], A = document.forms.form1; if (!A) { A = document.form1 } if (!A.onsubmit || (A.onsubmit() != false)) { A.POSTNAV.value = y.Nav; A.POSTDIST.value = y.Distance; A.submit() } }, m = function (z) { var y = p[z - 1], A = document.forms.form1; if (!A) { A = document.form1 } if (!A.onsubmit || (A.onsubmit() != false)) { A.POSTNAV.value = y.Nav; A.POSTDIST.value = y.Distance; A.submit() } }, q = { init: function (y) { if (y) { if (y.SpinLoader) { n = h(y.SpinLoader) } if (y.ResultTable) { i = h(y.ResultTable); x = i.height() } if (y.YourCostOn) { g = y.YourCostOn; if (g) { h(".YC").toggle(); if (g) { h("td.PRAC").css("width", "323px"); h("td.YC").css("width", "113px"); h("td.EC").css("width", "113px"); h("td.DIST").css("width", "73px"); h("td.FP").css("width", "73px"); h("td.HG").css("width", "112px") } else { h("td.PRAC").css("width", "323px"); h("td.YC").css("width", "0px"); h("td.EC").css("width", "162px"); h("td.DIST").css("width", "97px"); h("td.FP").css("width", "88px"); h("td.HG").css("width", "137px") } } } if (y.ScrollPane) { pane = h(y.ScrollPane); h(y.ScrollPane).scroll(function () { var z = i.position().top, A = (Math.round(x - Math.abs(z))); if (495 <= A && A <= 505) { c = pane[0].scrollTop; q.GetMoreResults(r.finished) } }) } if (y.HeaderTable) { d = h(y.HeaderTable).find("td[sort]"); h(d).each(function (z, A) { h(A).children("a").first().click(function () { var B; if (r.CurrentSort === h(this).parent("td").attr("sort")) { if (r.CurrentDirection === "ASC") { h(d).children("a").removeClass("sortAsc"); B = "DESC"; h(this).addClass("sortDesc") } else { h(d).children("a").removeClass("sortDesc"); B = "ASC"; h(this).addClass("sortAsc") } } else { h(d).children("a").removeClass("sortAsc").removeClass("sortDesc"); h(this).addClass("sortAsc"); B = "ASC" } h(o).children("input.sortHeader[checked]").attr("checked", ""); h(o).children("input.sortHeader[sortCol=" + h(this).parent("td").attr("sort") + "]").attr("checked", "checked"); q.GetResults({ CurrentSort: h(this).parent("td").attr("sort"), CurrentDirection: B, FromRow: 0, ToRow: 25, Latitude: r.Latitude, Longitude: r.Longitude }) }) }) } if (y.RadioHeaderDiv) { o = h(y.RadioHeaderDiv).find("span span"); h(o).each(function (z, A) { h(A).children("input.sortHeader").change(function () { h(d).children("a").removeClass("sortAsc").removeClass("sortDesc"); h(d).filter("[sort=" + h(this).attr("sortCol") + "]").children("a").first().addClass("sortAsc"); q.GetResults({ CurrentSort: h(this).attr("sortCol"), CurrentDirection: "ASC", FromRow: 0, ToRow: 25, Latitude: r.Latitude, Longitude: r.Longitude }) }) }) } if (y.YourCostTog) { k = h(y.YourCostTog); h(k).children("img.YC").click(function () { h(".YC").toggle(); g = !g; if (g) { h("td.PRAC").css("width", "323px"); h("td.YC").css("width", "113px"); h("td.EC").css("width", "113px"); h("td.DIST").css("width", "73px"); h("td.FP").css("width", "73px"); h("td.HG").css("width", "112px") } else { h("td.PRAC").css("width", "323px"); h("td.YC").css("width", "0px"); h("td.EC").css("width", "162px"); h("td.DIST").css("width", "97px"); h("td.FP").css("width", "88px"); h("td.HG").css("width", "137px") } }) } if (!h("a.table-map").data("events")) { h("a.table-map").click(function () { if (h(this).attr("id") === "showmapview") { h("#tableview").removeClass("showview").addClass("hideview"); h("#mapview").removeClass("hideview").addClass("showview"); h("#showtableview").removeClass("viewshows").css("cursor", "pointer").closest("div.buttonview").removeClass("viewshows").css("cursor", "pointer"); h("#showmapview").addClass("viewshows").css("cursor", "default").closest("div.buttonview").addClass("viewshows").css("cursor", "default"); h("#mapview").removeClass("hideview").addClass("showview"); q.ShowMap(); j = false } if (h(this).attr("id") === "showtableview") { h("#mapview").removeClass("showview").addClass("hideview"); h("#tableview").removeClass("hideview").addClass("showview"); h("#showmapview").removeClass("viewshows").css("cursor", "pointer").parent("div.buttonview").removeClass("viewshows").css("cursor", "pointer"); h("#showtableview").addClass("viewshows").css("cursor", "default").parent("div.buttonview").addClass("viewshows").css("cursor", "default") } h("a.table-map").attr("style", "").parent("div").attr("style", "") }) } } h.ajaxSetup({ url: "../Handlers/FindAServiceResults.ashx", cache: false, dataType: "jsonp", type: "POST", success: q.GotResults }); if (s && s.length > 0) { return s } else { return [] } }, GetResults: function (y) { if (!e) { e = true; i.html(""); s = []; w = []; l = []; n.show(); r = y; h.ajax({ data: r }) } }, GetMoreResults: function (y) { if (!e) { e = true; if (!y) { n.show(); r.FromRow = s.length + l.length + 1; r.ToRow = s.length + l.length + 20; h.ajax({ data: r }) } } }, GotResults: function (y) { if (y.LearnMore) { h("#ServiceMoreInfoText").text(y.LearnMore.Description) } if (y.EmptyResults === undefined) { w = y.Results; if (y.PreferredResults != undefined && p.length == 0) { p = y.PreferredResults; if (!google.maps) { google.load("maps", "3.9", { other_params: "client=gme-clearcosthealth&sensor=false", callback: q.GeocodePreferredResults }) } else { q.GeocodePreferredResults() } } else { q.ProcessRawResults() } } else { if (s.length == 0 && l.length == 0) { h(y.EmptyResults).appendTo(i); n.hide() } else { if (l.length > 0) { q.SortResults() } else { r.finished = true; n.hide() } } } }, ProcessRawResults: function () { if (!google.maps) { google.load("maps", "3.9", { other_params: "client=gme-clearcosthealth&sensor=false", callback: q.GeocodePreferredResults }) } else { q.GeocodeResults() } }, GeocodeResults: function () { var y = new google.maps.DistanceMatrixService(), B = [], A, z = w.length; for (var C = 0; C < z; C++) { B.push(w[C].Latitude + "," + w[C].Longitude) } if (B.length > 0) { A = { origins: [r.Latitude + "," + r.Longitude], destinations: B, travelMode: google.maps.TravelMode.DRIVING, unitSystem: google.maps.UnitSystem.IMPERIAL, avoidHighways: false, avoidTolls: false }; y.getDistanceMatrix(A, function (D) { var G = D.rows[0].elements, F = w.length; for (var E = 0; E < F; E++) { if (D) { if (G[E].status == "OK") { w[E].Distance = G[E].distance.text } } l.push(w[E]) } w = []; q.SortResults() }) } }, GeocodePreferredResults: function () { var y = new google.maps.DistanceMatrixService(), B = [], A, C = p.length; for (var z = 0; z < C; z++) { B.push(p[z].Latitude + "," + p[z].Longitude) } if (B.length > 0) { A = { origins: [r.Latitude + "," + r.Longitude], destinations: B, travelMode: google.maps.TravelMode.DRIVING, unitSystem: google.maps.UnitSystem.IMPERIAL, avoidHighways: false, avoidTolls: false }; y.getDistanceMatrix(A, function (D) { var F = D.rows[0].elements, G = p.length; for (var E = 0; E < G; E++) { if (D) { if (F[E].status == "OK") { p[E].Distance = F[E].distance.text } } } q.SortPreferredResults() }) } }, SortResults: function () { switch (r.CurrentSort) { case "Distance": l.SortByDistance(r.CurrentDirection); break; case "PracticeName": l.SortByPractice(r.CurrentDirection); break; case "FairPrice": l.SortByFairPrice(r.CurrentDirection); break; case "TotalCost": l.SortByTotalCost(r.CurrentDirection); break; default: break } q.DrawTable(); pane[0].scrollTop = c }, SortPreferredResults: function () { p.SortByDistance("ASC"); q.DrawPreferredTable() }, DrawTable: function () { var E = null, D = "", z, C, B = l.splice(0, 20), y = B.length; for (var A = 0; A < y; A++) { z = B[A]; C = s.length; E = h(z.RowHTML); E.attr("tableIndex", C); if (C == 0) { E.addClass("graytop") } if ((C % 2) == 0) { E.addClass("roweven") } E.find("td.DIST").find("span").text(z.Distance); E.find("div.result").attr("tableIndex", C); if (g) { E.find("td.PRAC").css("width", "323px"); E.find("td.YC").css("width", "113px").show(); E.find("td.EC").css("width", "113px"); E.find("td.DIST").css("width", "73px"); E.find("td.FP").css("width", "73px"); E.find("td.HG").css("width", "112px") } D += E[0].outerHTML; s.push(z); s[C].tableIndex = C } h(D).appendTo(i); x = i.height(); h(i).find(".PRAC a").click(function (F) { t(F.target.attributes.tableIndex.value * 1) }); r.finished = (l.length == 0); n.hide(); e = false }, DrawPreferredTable: function () { var E = null, D = "", z, C, B = p, y = B.length; for (var A = 0; A < y; A++) { z = B[A]; C = p.length; E = h(z.RowHTML); E.attr("tableIndex", C); if (C == 0) { E.addClass("graytop") } if ((C % 2) == 0) { E.addClass("roweven") } E.find("td.DIST").find("span").text(z.Distance); E.find("div.result").attr("tableIndex", C); if (g) { E.find("td.PRAC").css("width", "323px"); E.find("td.YC").css("width", "113px").show(); E.find("td.EC").css("width", "113px"); E.find("td.DIST").css("width", "73px"); E.find("td.FP").css("width", "73px"); E.find("td.HG").css("width", "112px") } D += E[0].outerHTML; p[A].tableIndex = C } h(D).appendTo(h("#tblPreferredResults")); h(h("#tblPreferredResults")).find(".PRAC a").click(function (F) { m(F.target.attributes.tableIndex.value * 1) }); h("#fsPreferred").show(); q.ProcessRawResults() }, ShowMap: function () { if (!google.maps) { google.load("maps", "3.8", { other_params: ((window.location.host.indexOf("localhost") > 0) ? "" : "client=gme-clearcosthealth&") + "sensor=false", callback: q.drawMap }) } else { q.drawMap() } }, drawMap: function () { var z, D, C = s.length; if (j) { var B = new google.maps.LatLng(r.Latitude, r.Longitude), y = { zoom: 10, center: B, mapTypeId: google.maps.MapTypeId.ROADMAP }, E = h("#resultmap")[0], A; u = new google.maps.Map(E, y); A = new google.maps.Marker({ position: B, map: u, icon: "../Images/icon_map_pin.png" }); v = new google.maps.InfoWindow(); google.maps.event.addListener(u, "click", function () { v.close() }) } for (z = 0; z < C; z++) { D = s[z]; if (!D.marker) { D.point = new google.maps.LatLng(D.Latitude, D.Longitude); D.marker = new google.maps.Marker({ position: D.point, map: u, icon: D.MapMarker }); google.maps.event.addListener(D.marker, "click", function () { var F = h(D.InfoHTML).find("a.readmore")[0], G = h(D.InfoHTML).find("a.readmore").attr("onclick", "'SelectResult(" + D.tableIndex + ");'")[0]; v.setContent(D.InfoHTML.replace(F.outerHTML, G.outerHTML)); v.open(u, D.marker) }) } } } }; h.fn.FASR = function (y) { if (q[y]) { return q[y].apply(this, Array.prototype.slice.call(arguments, 1)) } else { if (typeof y === "object" || !y) { return q.init.apply(this, arguments) } else { h.error("Method " + y + " does not exist on jQuery.FASR") } } }; window.SelectResult = t })(jQuery);