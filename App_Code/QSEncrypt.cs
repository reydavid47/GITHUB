using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.Web;
using System.IO;
using Microsoft.Security.Application;

namespace QSEncryption.QSEncryption
{
    public class QueryStringEncryption : Dictionary<string,string>
    {
        #region Private Vars
        //Must be at least 8 bytes
        private byte[] _keyBytes 
        {
            get 
            {
                if (userKey != new Guid())
                {
                    //Return the first 8 elements of the GUID byte array from the passed in Membership User ProviderUserKey
                    return userKey.ToByteArray().Take<byte>(8).ToArray<byte>();
                }
                else
                {
                    //Get a byte array based off of the year, month, day, hour, and dayofyear of this request for some level of randomness.
                    //i.e. change the byte key once an hour
                    byte[] b = NowAsBytes();
                    //Pad the array with junk bytes to create some randomness; Random bytes generated 8/6/12 by JM
                    return new byte[] { b[0], 0x66, b[1], 0xd0, b[2], 0xb5, b[3], 0x5b };
                }
            }
        }
        //An optional guid used to extract bytes for use with encryption
        private Guid userKey;
        //Must be at least 8 characters
        private const string _keyString = "k4J4vbDP"; //Randomly generated by JM 8/6/12
        //Name for checksum value (unlikely to be used as argument by the user
        private string _checksumKey = "__$$";
        //Error string for communication outside the dll
        private Exception err = null;
        #endregion
        public Exception Error { get { return this.err; } }
        public Guid UserKey { set { this.userKey = value; } }
        /// <summary>
        /// Create an empty dictionary
        /// </summary>
        public QueryStringEncryption()
        { }
        /// <summary>
        /// Creates a dictionary from the given, encrypted string
        /// </summary>
        /// <param name="encryptedData"></param>
        public QueryStringEncryption(string encryptedData)
        {
            //Decrypt the string
            string data = Decrypt(encryptedData);

            //Parse out the keyvalue pairs and add to the dictionary
            string checksum = null;
            string[] args = data.Split('&');
            foreach (string arg in args)
            {
                int i = arg.IndexOf('=');
                if (i != -1)
                {
                    string key = arg.Substring(0, i);
                    string value = arg.Substring(i + 1);
                    if (key == _checksumKey)
                        checksum = value;
                    else
                        base.Add(HttpUtility.UrlDecode(key), HttpUtility.UrlDecode(value));
                }
            }
            //Clear the contents if valid checksum not found
            if (checksum == null || checksum != ComputeChecksum())
                base.Clear();
        }
        /// <summary>
        /// Create a dictionary from the given, encrypted string and Member user Guid
        /// </summary>
        /// <param name="encryptedData"></param>
        /// <param name="UserKey"></param>
        public QueryStringEncryption(string encryptedData, Guid UserKey)
        {
            //Assign the key
            this.userKey = UserKey;

            //Decrypt the string
            string data = Decrypt(encryptedData);

            //Parse out the keyvalue pairs and add to the dictionary
            string checksum = null;
            string[] args = data.Split('&');
            foreach (string arg in args)
            {
                int i = arg.IndexOf('=');
                if (i != -1)
                {
                    string key = arg.Substring(0, i);
                    string value = arg.Substring(i + 1);
                    if (key == _checksumKey)
                        checksum = value;
                    else
                        base.Add(HttpUtility.UrlDecode(key), HttpUtility.UrlDecode(value));
                }
            }
            //Clear the contents if valid checksum not found
            if (checksum == null || checksum != ComputeChecksum())
                base.Clear();
        }
        /// <summary>
        /// Returns an encrypted string that contains the current dictionary
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            StringBuilder content = new StringBuilder();
            foreach (string key in base.Keys)
            {
                if (content.Length > 0)
                    content.Append('&');
                content.AppendFormat("{0}={1}", Microsoft.Security.Application.Encoder.UrlEncode(key),
                    Microsoft.Security.Application.Encoder.UrlEncode(base[key]));
            }
            if (content.Length > 0)
                content.Append('&');
            content.AppendFormat("{0}={1}", _checksumKey, ComputeChecksum());

            return Encrypt(content.ToString());
        }
        /// <summary>
        /// Returns a simple checksum for all keys and values in the collection
        /// </summary>
        /// <returns></returns>
        private string ComputeChecksum()
        {
            int checksum = 0;
            foreach (KeyValuePair<string, string> pair in this)
            {
                String nVal = pair.Value ?? String.Empty;
                checksum += pair.Key.Sum(c => c - '0');
                checksum += nVal.Sum(c => c - '0');
            }
            return checksum.ToString("X");
        }
        /// <summary>
        /// Encrypts a given string
        /// </summary>
        /// <param name="text">Text to be encrypted</param>
        /// <returns></returns>
        private string Encrypt(string text)
        {
            try
            {
                byte[] keyData = Encoding.UTF8.GetBytes(_keyString.Substring(0, 8));
                DESCryptoServiceProvider des = new DESCryptoServiceProvider();
                byte[] textData = Encoding.UTF8.GetBytes(text);
                MemoryStream ms = new MemoryStream();
                CryptoStream cs = new CryptoStream(ms,
                    des.CreateEncryptor(keyData, _keyBytes), CryptoStreamMode.Write);
                cs.Write(textData, 0, textData.Length);
                cs.FlushFinalBlock();
                return GetString(ms.ToArray());
            }
            catch (Exception ex)
            {
                this.err = ex;
                return String.Empty;
            }
        }
        /// <summary>
        /// Decrypts a given encrypted text
        /// </summary>
        /// <param name="text">Text to be decrypted</param>
        /// <returns></returns>
        private string Decrypt(string text)
        {
            try
            {
                byte[] keyData = Encoding.UTF8.GetBytes(_keyString.Substring(0, 8));
                DESCryptoServiceProvider des = new DESCryptoServiceProvider();
                byte[] textData = GetBytes(text);
                MemoryStream ms = new MemoryStream();
                CryptoStream cs = new CryptoStream(ms,
                    des.CreateDecryptor(keyData, _keyBytes), CryptoStreamMode.Write);
                cs.Write(textData, 0, textData.Length);
                cs.FlushFinalBlock();
                return Encoding.UTF8.GetString(ms.ToArray());
            }
            catch (Exception ex)
            {
                this.err = ex;
                return ex.Message;
            }
        }
        /// <summary>
        /// Converts a byte array to a string of hex characters
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private string GetString(byte[] data)
        {
            StringBuilder results = new StringBuilder();

            foreach (byte b in data)
                results.Append(b.ToString("X2"));

            return results.ToString();
        }
        /// <summary>
        /// Converts a string of hex characters to a byte array
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private byte[] GetBytes(string data)
        {
            byte[] results = new byte[data.Length / 2];
            for (int i = 0; i < data.Length; i += 2)
                results[i / 2] = Convert.ToByte(data.Substring(i, 2), 16);

            return results;
        }

        private static byte[] NowAsBytes()
        {
            DateTime n = DateTime.Now;
            string tmpDate =
                n.Year.ToString("D4") + n.Month.ToString("D2") + n.Day.ToString("D2")
                + n.Hour.ToString("D2");
            return BitConverter.GetBytes(Convert.ToUInt32(tmpDate));            
        }
    }
}
